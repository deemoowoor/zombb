/*! Zombb-Angular 2014-12-11 */
(function(){var m;m=angular.module("zombbApp",["zombb.auth","zombb.topic","zombb.user","zombb.dashboard","ngRoute","ngSanitize"]),m.config(["$routeProvider","$provide",function($routeProvider,$provide){var baseSrcPath;return baseSrcPath="/demo",$provide.value("baseSrcPath",baseSrcPath),$routeProvider.when("/topics",{templateUrl:""+baseSrcPath+"/topic-list.html",controller:"TopicListCtrl"}).when("/topics/new",{templateUrl:""+baseSrcPath+"/topic.html",controller:"TopicNewCtrl"}).when("/topics/:topic_id/edit",{templateUrl:""+baseSrcPath+"/topic.html",controller:"TopicEditCtrl"}).when("/topics/:topic_id",{templateUrl:""+baseSrcPath+"/topic.html",controller:"TopicCtrl"}).when("/users/:user_id",{templateUrl:""+baseSrcPath+"/user.html",controller:"UserCtrl"}).when("/users/:user_id/edit",{templateUrl:""+baseSrcPath+"/user.html",controller:"UserEditCtrl"}).when("/register",{templateUrl:""+baseSrcPath+"/user.html",controller:"UserRegisterCtrl"}).when("/dashboard",{templateUrl:""+baseSrcPath+"/dashboard.html",controller:"DashboardCtrl"}).otherwise({redirectTo:"/topics"}),null}]),m.controller("NavCtrl",["$scope","Auth","Authorize",function($scope,Auth,Authorize){return $scope.Authorize=Authorize,null}])}).call(this),function(){var m;m=angular.module("zombb.auth",["ngResource","Devise","ui.bootstrap"]),m.config(["AuthProvider",function(){return null}]),m.config(["AuthInterceptProvider",function(AuthInterceptProvider){return AuthInterceptProvider.interceptAuth(!0),null}]),m.run(["Auth",function(Auth){return Auth.login()}]),m.factory("Authorize",["Auth",function(Auth){var role;return role={admin:"admin",editor:"editor",reader:"reader"},this.condition={owner:function(user){var _ref;return user&&(null!=(_ref=Auth._currentUser)?_ref.name:void 0)===user.name||this.admin()},auth:function(){return Auth.isAuthenticated()},admin:function(){var _ref;return this.auth()&&(null!=(_ref=Auth._currentUser)?_ref.role:void 0)===role.admin},editor:function(){var _ref;return this.auth()&&((null!=(_ref=Auth._currentUser)?_ref.role:void 0)===role.editor||this.admin())},reader:function(){var _ref;return this.auth()&&((null!=(_ref=Auth._currentUser)?_ref.role:void 0)===role.reader||this.admin())},editor_owner:function(user){return this.editor()||this.owner(user)}},this}]),m.controller("AuthCtrl",["$scope","$modal","Auth","Authorize",function($scope,$modal,Auth,Authorize){return $scope.Auth=Auth,$scope.Authorize=Authorize,$scope.templateUrl="zombbAuthCtrl.html",$scope.open=function(size){var dialog,doLogin;return dialog=$modal.open({templateUrl:$scope.templateUrl,template:$scope.template,controller:"AuthDialogCtrl",controllerAs:"authDialog",scope:$scope,size:size}),doLogin=function(credentials){return Auth.login(credentials).then(function(){},function(error){return $scope.open(),$scope.error=error.data.error})},dialog.result.then(doLogin),dialog},$scope.$on("devise:unauthorized",function(event,xhr,deferred){return $scope.open().result.then(function(){return $http(xhr.config)}).then(function(response){return deferred.resolve(response)})}),$scope.$on("devise:login",function(event,currentUser){return $scope.currentUser=currentUser}),$scope.$on("devise:logout",function(){return $scope.currentUser=null}),null}]),m.controller("AuthDialogCtrl",["$scope","$modalInstance",function($scope,dialog){return $scope.ok=function(){return dialog.close({email:$scope.email,password:$scope.password})},$scope.cancel=function(){return dialog.dismiss("cancel")},null}])}.call(this),function(){var m;m=angular.module("zombb.dashboard",["zombb.auth","zombb.util"]),m.controller("DashboardCtrl",["$scope","$http","$location","Authorize","ConfirmDialog",function($scope,$http,$location,Authorize,ConfirmDialog){return Authorize.condition.admin()||$location("/"),$http.get("/stats.json").success(function(data){return $scope.stats=data}).error(function(error){return $scope.error=error.data}),$http.get("/users.json").success(function(data){return $scope.users=data}).error(function(error){return $scope.error=error.data}),$scope.getRoleIcon=function(user){var icons;return icons={admin:"cogs",reader:"eye",editor:"edit"},icons[user.role]},$scope.getRoleColor=function(user){var colors;return colors={admin:"danger",editor:"warning",reader:"success"},colors[user.role]},$scope.deleteUser=function(user){var dialog,doDelete;return dialog=ConfirmDialog($scope,{title:"Confirm cancel account?"}),doDelete=function(){return $http["delete"]("/users/"+user.id+".json").error(function(error){return $scope.error=error.data})},dialog.result.then(doDelete)}}])}.call(this),function(){var m;m=angular.module("zombb.topic",["ngResource","ui.bootstrap","monospaced.elastic","zombb.auth","zombb.util"]),m.factory("Post",["$resource",function($resource){return $resource("/posts/:post_id.json",{post_id:"@id"},{update:{method:"PUT"}})}]),m.factory("PostComment",["$resource",function($resource){return $resource("/posts/:post_id/post_comments/:c_id.json",{post_id:"@post_id",c_id:"@id"},{update:{method:"PUT"}})}]),m.controller("TopicListCtrl",["$scope","$modal","Auth","Authorize","Post","ConfirmDialog",function($scope,$modal,Auth,Authorize,Post,ConfirmDialog){return $scope.Authorize=Authorize,$scope.posts=[],Post.query(function(posts){return angular.forEach(posts,function(post){return $scope.posts.push(post)})}),$scope.deleteTopic=function(post){var dialog,doDelete;return dialog=ConfirmDialog($scope,{title:"Confirm delete topic?"}),doDelete=function(){return post.$delete().then(function(){return $scope.posts.splice($scope.posts.indexOf(post),1)},function(error){return $scope.error=error.data})},dialog.result.then(doDelete)},null}]),m.controller("TopicCtrl",["$scope","$routeParams","Auth","Authorize","Post","PostComment","ConfirmDialog",function($scope,$routeParams,Auth,Authorize,Post,PostComment,ConfirmDialog){return $scope.Authorize=Authorize,Post.get({post_id:$routeParams.topic_id},function(post){return $scope.post=post}),$scope.editComment=function(comment){return comment.editmode=!0,PostComment.get({post_id:$routeParams.topic_id,c_id:comment.id,edit:!0},function(rcomment){return $scope.edit_comment=rcomment})},$scope.cancelEditComment=function(comment){return comment.editmode=void 0,$scope.edit_comment=null},$scope.saveComment=function(comment){return comment.editmode=void 0,$scope.edit_comment.$update({post_id:$scope.post.id}),PostComment.get({post_id:$scope.post.id,c_id:comment.id},function(rcomment){return comment.text=rcomment.text})},$scope.deleteComment=function(comment){var dialog,doDelete;return dialog=ConfirmDialog($scope,{title:"Confirm delete comment?"}),doDelete=function(){return PostComment.get({post_id:$scope.post.id,c_id:comment.id},function(rcomment){var comment_index;return rcomment.$delete({post_id:$scope.post.id}).then((comment_index=$scope.post.post_comments.indexOf(comment),$scope.post.post_comments.splice(comment_index,1)),function(error){return $scope.error=error.data})})},dialog.result.then(doDelete)},$scope.new_comment=new PostComment,$scope.addComment=function(){return $scope.new_comment.$save({post_id:$scope.post.id},function(rcomment){return $scope.post.post_comments.push(rcomment),$scope.new_comment=new PostComment})},null}]),m.controller("TopicEditCtrl",["$scope","$routeParams","$location","Post","Auth",function($scope,$routeParams,$location,Post){return $scope.editmode=!0,Post.get({post_id:$routeParams.topic_id,edit:!0},function(post){return $scope.post=post}),$scope.submit=function(){return $scope.post.$update().then(Post.get({post_id:$scope.post.id,edit:!0},function(post){return $scope.post=post,$location.path("/topics/"+$scope.post.id)}),function(error){return $scope.error=error.data})},null}]),m.controller("TopicNewCtrl",["$scope","$routeParams","$location","Post","Auth",function($scope,$routeParams,$location,Post){return $scope.editmode=!0,$scope.post=new Post,$scope.submit=function(){return $scope.post.$save().then(Post.get({post_id:$scope.post.id,edit:!0},function(post){return $scope.post=post,$location.path("/topics/"+$scope.post.id)}),function(error){return $scope.error=error.field})},null}])}.call(this),function(){var m;m=angular.module("zombb.user",["ngResource","zombb.auth","zombb.util"]),m.factory("User",["$resource",function($resource){return $resource("/users/:user_id.json",{user_id:"@id"})}]),m.controller("UserCtrl",["$scope","$routeParams","User",function($scope,$routeParams,User){return User.get({user_id:$routeParams.user_id},function(user){return $scope.user=user})}]),m.controller("UserEditCtrl",["$scope","$routeParams","$location","$http","Auth","ConfirmDialog","User",function($scope,$routeParams,$location,$http,Auth,ConfirmDialog,User){return $scope.editmode=!0,$scope.Auth=Auth,User.get({user_id:$routeParams.user_id},function(user){return $scope.user=user}),$scope.submit=function(){var successcb;return successcb=function(){return User.get({user_id:$scope.user.id},function(user){return $scope.user=user,$location.path("/users/"+$scope.user.id)})},$http.put("/users.json",{user:$scope.user.toJSON()}).success(successcb).error(function(error){return $scope.error=error.data})},$scope.cancel=function(){return $location.path("/users/"+$scope.user.id)},$scope.deleteAccount=function(){var dialog,doDelete;return dialog=ConfirmDialog($scope,{title:"Confirm cancel account?"}),doDelete=function(){return $http["delete"]("/users.json",{user:$scope.user.toJSON()}).error(function(error){return $scope.error=error.data}).success(function(){return Auth.logout(),$location.path("/")})},dialog.result.then(doDelete)},null}]),m.controller("UserRegisterCtrl",["$scope","$routeParams","$location","Auth",function($scope,$routeParams,$location,Auth){return $scope.editmode=!0,$scope.register=!0,$scope.user={name:""},$scope.submit=function(){return Auth.register($scope.user).then(function(user){return $location.path("/users/"+user.id)},function(error){return $scope.error=error.data.errors})},null}])}.call(this),function(){var m;m=angular.module("zombb.util",["ui.bootstrap"]),m.factory("ConfirmDialog",["$modal",function($modal){return function($scope,messages){var dialog;return $scope.templateUrl=null,$scope.title=(null!=messages?messages.title:void 0)||"Confirm?",$scope.template='<div class="modal-header"> <h3 class="modal-title">{{ title }}</h3> </div> <div class="modal-body"> <input type="submit" value="OK" class="btn btn-success" ng-click="ok()" /> <button class="btn btn-default" ng-click="cancel()">Cancel</button> </div>',dialog=$modal.open({templateUrl:$scope.templateUrl,template:$scope.template,controller:"ConfirmDialogCtrl",controllerAs:"confirmDialog",scope:$scope})}}]),m.controller("ConfirmDialogCtrl",["$scope","$modalInstance",function($scope,dialog){return $scope.ok=function(){return dialog.close(!0)},$scope.cancel=function(){return dialog.dismiss("cancel")},null}])}.call(this);